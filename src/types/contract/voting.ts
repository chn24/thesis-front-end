/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace IVoting {
  export type ProposalInfoStruct = {
    content: PromiseOrValue<BytesLike>;
    isImportant: PromiseOrValue<boolean>;
  };

  export type ProposalInfoStructOutput = [string, boolean] & {
    content: string;
    isImportant: boolean;
  };

  export type NominationStruct = {
    index: PromiseOrValue<BigNumberish>;
    content: PromiseOrValue<BytesLike>;
  };

  export type NominationStructOutput = [number, string] & {
    index: number;
    content: string;
  };

  export type ProposalStruct = {
    content: PromiseOrValue<BytesLike>;
    isImportant: PromiseOrValue<boolean>;
    totalVote: PromiseOrValue<BigNumberish>;
    agreeCount: PromiseOrValue<BigNumberish>;
  };

  export type ProposalStructOutput = [string, boolean, BigNumber, BigNumber] & {
    content: string;
    isImportant: boolean;
    totalVote: BigNumber;
    agreeCount: BigNumber;
  };

  export type ResultStruct = {
    agree: PromiseOrValue<BigNumberish>;
    totalVote: PromiseOrValue<BigNumberish>;
  };

  export type ResultStructOutput = [BigNumber, BigNumber] & {
    agree: BigNumber;
    totalVote: BigNumber;
  };

  export type NominationResultStruct = {
    index: PromiseOrValue<BigNumberish>;
    content: PromiseOrValue<BytesLike>;
    totalVote: PromiseOrValue<BigNumberish>;
  };

  export type NominationResultStructOutput = [number, string, BigNumber] & {
    index: number;
    content: string;
    totalVote: BigNumber;
  };

  export type AnswerStruct = {
    index: PromiseOrValue<BigNumberish>;
    option: PromiseOrValue<BigNumberish>;
  };

  export type AnswerStructOutput = [number, number] & {
    index: number;
    option: number;
  };
}

export interface VotingInterface extends utils.Interface {
  functions: {
    "acceptOwnership()": FunctionFragment;
    "accountManager()": FunctionFragment;
    "addNomination(bytes[])": FunctionFragment;
    "addProposal((bytes,bool)[])": FunctionFragment;
    "checkBytesEmpty(bytes)": FunctionFragment;
    "checkUserVoted(address)": FunctionFragment;
    "getAllNominations()": FunctionFragment;
    "getAllProposals()": FunctionFragment;
    "getAllResults()": FunctionFragment;
    "getResultOfNomination(uint16)": FunctionFragment;
    "getResultOfProposal(uint16)": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "isNominationVoted(uint16,address)": FunctionFragment;
    "isProposalVoted(uint16,address)": FunctionFragment;
    "limitNominationVoted()": FunctionFragment;
    "nominationVoteCount(uint16)": FunctionFragment;
    "nominations(uint16)": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingOwner()": FunctionFragment;
    "proposals(uint16)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setLimitNominationVoted(uint16)": FunctionFragment;
    "setStatus(uint8)": FunctionFragment;
    "status()": FunctionFragment;
    "totalNomination()": FunctionFragment;
    "totalProposal()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateNominations(bytes[],uint16[])": FunctionFragment;
    "updateProposals((bytes,bool)[],uint16[])": FunctionFragment;
    "vote((uint16,uint8)[],uint16[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acceptOwnership"
      | "accountManager"
      | "addNomination"
      | "addProposal"
      | "checkBytesEmpty"
      | "checkUserVoted"
      | "getAllNominations"
      | "getAllProposals"
      | "getAllResults"
      | "getResultOfNomination"
      | "getResultOfProposal"
      | "initialize"
      | "isNominationVoted"
      | "isProposalVoted"
      | "limitNominationVoted"
      | "nominationVoteCount"
      | "nominations"
      | "owner"
      | "pendingOwner"
      | "proposals"
      | "renounceOwnership"
      | "setLimitNominationVoted"
      | "setStatus"
      | "status"
      | "totalNomination"
      | "totalProposal"
      | "transferOwnership"
      | "updateNominations"
      | "updateProposals"
      | "vote"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accountManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addNomination",
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "addProposal",
    values: [IVoting.ProposalInfoStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "checkBytesEmpty",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "checkUserVoted",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllNominations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllProposals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAllResults",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getResultOfNomination",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getResultOfProposal",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isNominationVoted",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isProposalVoted",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "limitNominationVoted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nominationVoteCount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "nominations",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposals",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setLimitNominationVoted",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setStatus",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "status", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalNomination",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalProposal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateNominations",
    values: [PromiseOrValue<BytesLike>[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updateProposals",
    values: [IVoting.ProposalInfoStruct[], PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [IVoting.AnswerStruct[], PromiseOrValue<BigNumberish>[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accountManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addNomination",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkBytesEmpty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkUserVoted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllNominations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllProposals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllResults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getResultOfNomination",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getResultOfProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isNominationVoted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isProposalVoted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "limitNominationVoted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nominationVoteCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nominations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLimitNominationVoted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setStatus", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "status", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalNomination",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateNominations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateProposals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;

  events: {
    "AddProposal(bytes[],bool[],uint16,uint16)": EventFragment;
    "OwnershipTransferStarted(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddProposal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface AddProposalEventObject {
  contents: string[];
  isImportants: boolean[];
  startIndex: number;
  totalProposal: number;
}
export type AddProposalEvent = TypedEvent<
  [string[], boolean[], number, number],
  AddProposalEventObject
>;

export type AddProposalEventFilter = TypedEventFilter<AddProposalEvent>;

export interface OwnershipTransferStartedEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferStartedEvent = TypedEvent<
  [string, string],
  OwnershipTransferStartedEventObject
>;

export type OwnershipTransferStartedEventFilter =
  TypedEventFilter<OwnershipTransferStartedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface Voting extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VotingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    accountManager(overrides?: CallOverrides): Promise<[string]>;

    addNomination(
      listNomination: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addProposal(
      proposalInfos: IVoting.ProposalInfoStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    checkBytesEmpty(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    checkUserVoted(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getAllNominations(
      overrides?: CallOverrides
    ): Promise<[number, IVoting.NominationStructOutput[]]>;

    getAllProposals(
      overrides?: CallOverrides
    ): Promise<[IVoting.ProposalStructOutput[]]>;

    getAllResults(
      overrides?: CallOverrides
    ): Promise<
      [IVoting.ResultStructOutput[], IVoting.NominationResultStructOutput[]]
    >;

    getResultOfNomination(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, number, BigNumber]>;

    getResultOfProposal(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    initialize(
      _owner: PromiseOrValue<string>,
      _accountManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isNominationVoted(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isProposalVoted(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    limitNominationVoted(overrides?: CallOverrides): Promise<[number]>;

    nominationVoteCount(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    nominations(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingOwner(overrides?: CallOverrides): Promise<[string]>;

    proposals(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean, BigNumber, BigNumber] & {
        content: string;
        isImportant: boolean;
        totalVote: BigNumber;
        agreeCount: BigNumber;
      }
    >;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLimitNominationVoted(
      _limitNominationVoted: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setStatus(
      _status: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    status(overrides?: CallOverrides): Promise<[number]>;

    totalNomination(overrides?: CallOverrides): Promise<[number]>;

    totalProposal(overrides?: CallOverrides): Promise<[number]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateNominations(
      listNomination: PromiseOrValue<BytesLike>[],
      nominationIdxs: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateProposals(
      proposalInfos: IVoting.ProposalInfoStruct[],
      proposalIdxs: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    vote(
      answers: IVoting.AnswerStruct[],
      nominationIndexs: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  acceptOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  accountManager(overrides?: CallOverrides): Promise<string>;

  addNomination(
    listNomination: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addProposal(
    proposalInfos: IVoting.ProposalInfoStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  checkBytesEmpty(
    data: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<void>;

  checkUserVoted(
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getAllNominations(
    overrides?: CallOverrides
  ): Promise<[number, IVoting.NominationStructOutput[]]>;

  getAllProposals(
    overrides?: CallOverrides
  ): Promise<IVoting.ProposalStructOutput[]>;

  getAllResults(
    overrides?: CallOverrides
  ): Promise<
    [IVoting.ResultStructOutput[], IVoting.NominationResultStructOutput[]]
  >;

  getResultOfNomination(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string, number, BigNumber]>;

  getResultOfProposal(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  initialize(
    _owner: PromiseOrValue<string>,
    _accountManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isNominationVoted(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isProposalVoted(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  limitNominationVoted(overrides?: CallOverrides): Promise<number>;

  nominationVoteCount(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  nominations(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingOwner(overrides?: CallOverrides): Promise<string>;

  proposals(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, boolean, BigNumber, BigNumber] & {
      content: string;
      isImportant: boolean;
      totalVote: BigNumber;
      agreeCount: BigNumber;
    }
  >;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLimitNominationVoted(
    _limitNominationVoted: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setStatus(
    _status: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  status(overrides?: CallOverrides): Promise<number>;

  totalNomination(overrides?: CallOverrides): Promise<number>;

  totalProposal(overrides?: CallOverrides): Promise<number>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateNominations(
    listNomination: PromiseOrValue<BytesLike>[],
    nominationIdxs: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateProposals(
    proposalInfos: IVoting.ProposalInfoStruct[],
    proposalIdxs: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  vote(
    answers: IVoting.AnswerStruct[],
    nominationIndexs: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    accountManager(overrides?: CallOverrides): Promise<string>;

    addNomination(
      listNomination: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    addProposal(
      proposalInfos: IVoting.ProposalInfoStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    checkBytesEmpty(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    checkUserVoted(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getAllNominations(
      overrides?: CallOverrides
    ): Promise<[number, IVoting.NominationStructOutput[]]>;

    getAllProposals(
      overrides?: CallOverrides
    ): Promise<IVoting.ProposalStructOutput[]>;

    getAllResults(
      overrides?: CallOverrides
    ): Promise<
      [IVoting.ResultStructOutput[], IVoting.NominationResultStructOutput[]]
    >;

    getResultOfNomination(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string, number, BigNumber]>;

    getResultOfProposal(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    initialize(
      _owner: PromiseOrValue<string>,
      _accountManager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    isNominationVoted(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isProposalVoted(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    limitNominationVoted(overrides?: CallOverrides): Promise<number>;

    nominationVoteCount(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nominations(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingOwner(overrides?: CallOverrides): Promise<string>;

    proposals(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean, BigNumber, BigNumber] & {
        content: string;
        isImportant: boolean;
        totalVote: BigNumber;
        agreeCount: BigNumber;
      }
    >;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setLimitNominationVoted(
      _limitNominationVoted: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setStatus(
      _status: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    status(overrides?: CallOverrides): Promise<number>;

    totalNomination(overrides?: CallOverrides): Promise<number>;

    totalProposal(overrides?: CallOverrides): Promise<number>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateNominations(
      listNomination: PromiseOrValue<BytesLike>[],
      nominationIdxs: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    updateProposals(
      proposalInfos: IVoting.ProposalInfoStruct[],
      proposalIdxs: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    vote(
      answers: IVoting.AnswerStruct[],
      nominationIndexs: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddProposal(bytes[],bool[],uint16,uint16)"(
      contents?: null,
      isImportants?: null,
      startIndex?: null,
      totalProposal?: null
    ): AddProposalEventFilter;
    AddProposal(
      contents?: null,
      isImportants?: null,
      startIndex?: null,
      totalProposal?: null
    ): AddProposalEventFilter;

    "OwnershipTransferStarted(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferStartedEventFilter;
    OwnershipTransferStarted(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferStartedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    accountManager(overrides?: CallOverrides): Promise<BigNumber>;

    addNomination(
      listNomination: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addProposal(
      proposalInfos: IVoting.ProposalInfoStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    checkBytesEmpty(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkUserVoted(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllNominations(overrides?: CallOverrides): Promise<BigNumber>;

    getAllProposals(overrides?: CallOverrides): Promise<BigNumber>;

    getAllResults(overrides?: CallOverrides): Promise<BigNumber>;

    getResultOfNomination(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getResultOfProposal(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _owner: PromiseOrValue<string>,
      _accountManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isNominationVoted(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isProposalVoted(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    limitNominationVoted(overrides?: CallOverrides): Promise<BigNumber>;

    nominationVoteCount(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nominations(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;

    proposals(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLimitNominationVoted(
      _limitNominationVoted: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setStatus(
      _status: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    status(overrides?: CallOverrides): Promise<BigNumber>;

    totalNomination(overrides?: CallOverrides): Promise<BigNumber>;

    totalProposal(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateNominations(
      listNomination: PromiseOrValue<BytesLike>[],
      nominationIdxs: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateProposals(
      proposalInfos: IVoting.ProposalInfoStruct[],
      proposalIdxs: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    vote(
      answers: IVoting.AnswerStruct[],
      nominationIndexs: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    accountManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addNomination(
      listNomination: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addProposal(
      proposalInfos: IVoting.ProposalInfoStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    checkBytesEmpty(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkUserVoted(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllNominations(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllProposals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllResults(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getResultOfNomination(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getResultOfProposal(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _owner: PromiseOrValue<string>,
      _accountManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isNominationVoted(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isProposalVoted(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    limitNominationVoted(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nominationVoteCount(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nominations(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposals(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLimitNominationVoted(
      _limitNominationVoted: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setStatus(
      _status: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    status(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalNomination(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalProposal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateNominations(
      listNomination: PromiseOrValue<BytesLike>[],
      nominationIdxs: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateProposals(
      proposalInfos: IVoting.ProposalInfoStruct[],
      proposalIdxs: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    vote(
      answers: IVoting.AnswerStruct[],
      nominationIndexs: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
